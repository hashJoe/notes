#compare files windows
FC <filename.type> <filename.type>

#compare files unix
diff -u <filename.type> <filename.type>

#multiple files track together called repository

#to check git version or if it installed 
git --version

#to get the latest development version via Git itself
git clone https://github.com/git/git

#to copy files from one computer to another, we use git 
#in other words, to clone repository
git clone <url.comes.here>

#to check which files have changed with each commit
git log --stat    #press q to exit the git log
#green signs indicate additions and red indicates deletion
#they are proportional 

#to compare files together, take the id of the commit 
git diff <id_old> <id_new>

#inorder to get the color of changes
git config --global color.ui auto

#commit is a snapshot of each file in the repo

#to be able to view the difference between any two commits is pretty convenient, but 
#we can also temporarily change our files back to how they were at the time of any commit
#it is sort of restoring a previous version
#resetting all files to the time of the commit was made
#e.g. a bug is introduced but not sure which commit, resetting it and checking the previous code would help
git checkout <commitID>



////////////////////////////
Changing background color
If you prefer the background color of Git Bash to be something other than black, you can change it in the "Defaults" menu under the "Colors" tab. If you like the background color as-is, you don't need to make any changes.

Downloading necessary files
Save this file in your home directory with the name git-completion.bash.
Save this file in your home directory with the name git-prompt.sh.
Download bash_profile_course from the Downloadables section.
If you already have a file in your home directory named .bash_profile, copy the content from bash_profile_course and paste it at the bottom of .bash_profile. Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile. (If you're curious to learn more about how bash prompts work, see this page.)
Making Git configurations
Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from Git Bash.

git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3
Make sure you can start your editor from Git Bash
If you use Sublime, you can do this by adding the following line to your .bash_profile:

alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"
Restart Git Bash
You'll need to close and re-open Git Bash before all your changes take effect.
/////////////////////////////////////////////////////

////////////////////////////////////////////////
Downloading necessary files
Save this file in your home directory with the name git-completion.bash.
Save this file in your home directory with the name git-prompt.sh.
Download bash_profile_course here.
If you already have a file in your home directory named .bash_profile, copy the content from bash_profile_course and paste it at the bottom of .bash_profile. Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile. If you use Linux, you may need to name this file .bashrc instead of .bash_profile. (If you're curious to learn more about how bash prompts work, see this page.)
Make sure you can start your editor from the terminal
If you use Sublime, you can do this by add the following line to your .bash_profile (you may need to change the path if Sublime is installed in a different location for you):

alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
Making Git configurations
Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from the terminal.

git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3
(Instead of the first command, you may be able to use the simpler git config --global core.editor "subl -n -w" as shown in the video, but many students have found this does not work for them.)

Restart the terminal
You'll need to close and re-open the terminal before all your changes take effect.
/////////////////////////////////////////////////////////////


#to see also hidden files 
ls -a

#to initiate a repository
git init

#which files have changed after each commit
git status

#add to the stage area before committing
git add <fileName>

#then commit it and add message
#to edit the message type
git commit --amend

#to view the changes that haven't been added yet to the staging area 
git diff "without any thing here"

#to view the changes between staging area and repository
git diff --staged

#to ignore the changes 
git reset --hard

#to fix HEAD detached
git checkcout master

#to check the current branches
git branch

#to create a branch
git branch <branch-name>

#then go to the branch
git checkout <branch-name>

#visualize the branch structure
git log --graph --oneline master <branch-name>

git checkout -b <branch-name>
is the same as
git branch <branch-name>
git checkout <branch-name>

#garbage collection
git gc #but it runs from time to time

#to merge to branches
#go to checkout of the branch you want to receive the merge
git merge master <branch-name>

#to show the diff between a commit and its parent
git show <commit_id>

#to delete a branch after merging
git branch -d <branch-name>

#notepad ++
git config  --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

#to create a remote to github and see them
git remote

#to add
git remote add <origin> git@github.com:hashishoya/notes.git

#to verify
git remote -v

#send changes
git push origin master

#to change url
git remote set-url origin https://github.com/hashishoya/notes.git

#to pull the changes on Github
git pull origin master